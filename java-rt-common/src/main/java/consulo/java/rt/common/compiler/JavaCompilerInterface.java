/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package consulo.java.rt.common.compiler;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class JavaCompilerInterface {

  public interface Iface {

    public void logInfo(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException;

    public void logError(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException;

    public void logWarning(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException;

    public void fileWrote(java.lang.String filePath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void logInfo(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void logError(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void logWarning(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void fileWrote(java.lang.String filePath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void logInfo(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException
    {
      send_logInfo(message, fileUri, lineNumber, columnNumber);
      recv_logInfo();
    }

    public void send_logInfo(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException
    {
      logInfo_args args = new logInfo_args();
      args.setMessage(message);
      args.setFileUri(fileUri);
      args.setLineNumber(lineNumber);
      args.setColumnNumber(columnNumber);
      sendBase("logInfo", args);
    }

    public void recv_logInfo() throws org.apache.thrift.TException
    {
      logInfo_result result = new logInfo_result();
      receiveBase(result, "logInfo");
      return;
    }

    public void logError(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException
    {
      send_logError(message, fileUri, lineNumber, columnNumber);
      recv_logError();
    }

    public void send_logError(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException
    {
      logError_args args = new logError_args();
      args.setMessage(message);
      args.setFileUri(fileUri);
      args.setLineNumber(lineNumber);
      args.setColumnNumber(columnNumber);
      sendBase("logError", args);
    }

    public void recv_logError() throws org.apache.thrift.TException
    {
      logError_result result = new logError_result();
      receiveBase(result, "logError");
      return;
    }

    public void logWarning(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException
    {
      send_logWarning(message, fileUri, lineNumber, columnNumber);
      recv_logWarning();
    }

    public void send_logWarning(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber) throws org.apache.thrift.TException
    {
      logWarning_args args = new logWarning_args();
      args.setMessage(message);
      args.setFileUri(fileUri);
      args.setLineNumber(lineNumber);
      args.setColumnNumber(columnNumber);
      sendBase("logWarning", args);
    }

    public void recv_logWarning() throws org.apache.thrift.TException
    {
      logWarning_result result = new logWarning_result();
      receiveBase(result, "logWarning");
      return;
    }

    public void fileWrote(java.lang.String filePath) throws org.apache.thrift.TException
    {
      send_fileWrote(filePath);
      recv_fileWrote();
    }

    public void send_fileWrote(java.lang.String filePath) throws org.apache.thrift.TException
    {
      fileWrote_args args = new fileWrote_args();
      args.setFilePath(filePath);
      sendBase("fileWrote", args);
    }

    public void recv_fileWrote() throws org.apache.thrift.TException
    {
      fileWrote_result result = new fileWrote_result();
      receiveBase(result, "fileWrote");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void logInfo(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logInfo_call method_call = new logInfo_call(message, fileUri, lineNumber, columnNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logInfo_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String message;
      private java.lang.String fileUri;
      private long lineNumber;
      private long columnNumber;
      public logInfo_call(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.fileUri = fileUri;
        this.lineNumber = lineNumber;
        this.columnNumber = columnNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logInfo_args args = new logInfo_args();
        args.setMessage(message);
        args.setFileUri(fileUri);
        args.setLineNumber(lineNumber);
        args.setColumnNumber(columnNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void logError(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logError_call method_call = new logError_call(message, fileUri, lineNumber, columnNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logError_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String message;
      private java.lang.String fileUri;
      private long lineNumber;
      private long columnNumber;
      public logError_call(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.fileUri = fileUri;
        this.lineNumber = lineNumber;
        this.columnNumber = columnNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logError", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logError_args args = new logError_args();
        args.setMessage(message);
        args.setFileUri(fileUri);
        args.setLineNumber(lineNumber);
        args.setColumnNumber(columnNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void logWarning(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logWarning_call method_call = new logWarning_call(message, fileUri, lineNumber, columnNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logWarning_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String message;
      private java.lang.String fileUri;
      private long lineNumber;
      private long columnNumber;
      public logWarning_call(java.lang.String message, java.lang.String fileUri, long lineNumber, long columnNumber, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message = message;
        this.fileUri = fileUri;
        this.lineNumber = lineNumber;
        this.columnNumber = columnNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logWarning", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logWarning_args args = new logWarning_args();
        args.setMessage(message);
        args.setFileUri(fileUri);
        args.setLineNumber(lineNumber);
        args.setColumnNumber(columnNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void fileWrote(java.lang.String filePath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileWrote_call method_call = new fileWrote_call(filePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileWrote_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String filePath;
      public fileWrote_call(java.lang.String filePath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileWrote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fileWrote_args args = new fileWrote_args();
        args.setFilePath(filePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("logInfo", new logInfo());
      processMap.put("logError", new logError());
      processMap.put("logWarning", new logWarning());
      processMap.put("fileWrote", new fileWrote());
      return processMap;
    }

    public static class logInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logInfo_args> {
      public logInfo() {
        super("logInfo");
      }

      public logInfo_args getEmptyArgsInstance() {
        return new logInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public logInfo_result getResult(I iface, logInfo_args args) throws org.apache.thrift.TException {
        logInfo_result result = new logInfo_result();
        iface.logInfo(args.message, args.fileUri, args.lineNumber, args.columnNumber);
        return result;
      }
    }

    public static class logError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logError_args> {
      public logError() {
        super("logError");
      }

      public logError_args getEmptyArgsInstance() {
        return new logError_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public logError_result getResult(I iface, logError_args args) throws org.apache.thrift.TException {
        logError_result result = new logError_result();
        iface.logError(args.message, args.fileUri, args.lineNumber, args.columnNumber);
        return result;
      }
    }

    public static class logWarning<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logWarning_args> {
      public logWarning() {
        super("logWarning");
      }

      public logWarning_args getEmptyArgsInstance() {
        return new logWarning_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public logWarning_result getResult(I iface, logWarning_args args) throws org.apache.thrift.TException {
        logWarning_result result = new logWarning_result();
        iface.logWarning(args.message, args.fileUri, args.lineNumber, args.columnNumber);
        return result;
      }
    }

    public static class fileWrote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileWrote_args> {
      public fileWrote() {
        super("fileWrote");
      }

      public fileWrote_args getEmptyArgsInstance() {
        return new fileWrote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fileWrote_result getResult(I iface, fileWrote_args args) throws org.apache.thrift.TException {
        fileWrote_result result = new fileWrote_result();
        iface.fileWrote(args.filePath);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("logInfo", new logInfo());
      processMap.put("logError", new logError());
      processMap.put("logWarning", new logWarning());
      processMap.put("fileWrote", new fileWrote());
      return processMap;
    }

    public static class logInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logInfo_args, Void> {
      public logInfo() {
        super("logInfo");
      }

      public logInfo_args getEmptyArgsInstance() {
        return new logInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logInfo_result result = new logInfo_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logInfo_result result = new logInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logInfo(args.message, args.fileUri, args.lineNumber, args.columnNumber,resultHandler);
      }
    }

    public static class logError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logError_args, Void> {
      public logError() {
        super("logError");
      }

      public logError_args getEmptyArgsInstance() {
        return new logError_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logError_result result = new logError_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logError_result result = new logError_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logError_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logError(args.message, args.fileUri, args.lineNumber, args.columnNumber,resultHandler);
      }
    }

    public static class logWarning<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logWarning_args, Void> {
      public logWarning() {
        super("logWarning");
      }

      public logWarning_args getEmptyArgsInstance() {
        return new logWarning_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logWarning_result result = new logWarning_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logWarning_result result = new logWarning_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logWarning_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logWarning(args.message, args.fileUri, args.lineNumber, args.columnNumber,resultHandler);
      }
    }

    public static class fileWrote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileWrote_args, Void> {
      public fileWrote() {
        super("fileWrote");
      }

      public fileWrote_args getEmptyArgsInstance() {
        return new fileWrote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            fileWrote_result result = new fileWrote_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fileWrote_result result = new fileWrote_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fileWrote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.fileWrote(args.filePath,resultHandler);
      }
    }

  }

  public static class logInfo_args implements org.apache.thrift.TBase<logInfo_args, logInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<logInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logInfo_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNumber", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logInfo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String fileUri; // required
    public long lineNumber; // required
    public long columnNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      FILE_URI((short)2, "fileUri"),
      LINE_NUMBER((short)3, "lineNumber"),
      COLUMN_NUMBER((short)4, "columnNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // FILE_URI
            return FILE_URI;
          case 3: // LINE_NUMBER
            return LINE_NUMBER;
          case 4: // COLUMN_NUMBER
            return COLUMN_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINENUMBER_ISSET_ID = 0;
    private static final int __COLUMNNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_URI, new org.apache.thrift.meta_data.FieldMetaData("fileUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COLUMN_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("columnNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logInfo_args.class, metaDataMap);
    }

    public logInfo_args() {
    }

    public logInfo_args(
      java.lang.String message,
      java.lang.String fileUri,
      long lineNumber,
      long columnNumber)
    {
      this();
      this.message = message;
      this.fileUri = fileUri;
      this.lineNumber = lineNumber;
      setLineNumberIsSet(true);
      this.columnNumber = columnNumber;
      setColumnNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logInfo_args(logInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetFileUri()) {
        this.fileUri = other.fileUri;
      }
      this.lineNumber = other.lineNumber;
      this.columnNumber = other.columnNumber;
    }

    public logInfo_args deepCopy() {
      return new logInfo_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
      this.fileUri = null;
      setLineNumberIsSet(false);
      this.lineNumber = 0;
      setColumnNumberIsSet(false);
      this.columnNumber = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessage() {
      return this.message;
    }

    public logInfo_args setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFileUri() {
      return this.fileUri;
    }

    public logInfo_args setFileUri(@org.apache.thrift.annotation.Nullable java.lang.String fileUri) {
      this.fileUri = fileUri;
      return this;
    }

    public void unsetFileUri() {
      this.fileUri = null;
    }

    /** Returns true if field fileUri is set (has been assigned a value) and false otherwise */
    public boolean isSetFileUri() {
      return this.fileUri != null;
    }

    public void setFileUriIsSet(boolean value) {
      if (!value) {
        this.fileUri = null;
      }
    }

    public long getLineNumber() {
      return this.lineNumber;
    }

    public logInfo_args setLineNumber(long lineNumber) {
      this.lineNumber = lineNumber;
      setLineNumberIsSet(true);
      return this;
    }

    public void unsetLineNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetLineNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    public void setLineNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
    }

    public long getColumnNumber() {
      return this.columnNumber;
    }

    public logInfo_args setColumnNumber(long columnNumber) {
      this.columnNumber = columnNumber;
      setColumnNumberIsSet(true);
      return this;
    }

    public void unsetColumnNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    /** Returns true if field columnNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    public void setColumnNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((java.lang.String)value);
        }
        break;

      case FILE_URI:
        if (value == null) {
          unsetFileUri();
        } else {
          setFileUri((java.lang.String)value);
        }
        break;

      case LINE_NUMBER:
        if (value == null) {
          unsetLineNumber();
        } else {
          setLineNumber((java.lang.Long)value);
        }
        break;

      case COLUMN_NUMBER:
        if (value == null) {
          unsetColumnNumber();
        } else {
          setColumnNumber((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case FILE_URI:
        return getFileUri();

      case LINE_NUMBER:
        return getLineNumber();

      case COLUMN_NUMBER:
        return getColumnNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case FILE_URI:
        return isSetFileUri();
      case LINE_NUMBER:
        return isSetLineNumber();
      case COLUMN_NUMBER:
        return isSetColumnNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logInfo_args)
        return this.equals((logInfo_args)that);
      return false;
    }

    public boolean equals(logInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_fileUri = true && this.isSetFileUri();
      boolean that_present_fileUri = true && that.isSetFileUri();
      if (this_present_fileUri || that_present_fileUri) {
        if (!(this_present_fileUri && that_present_fileUri))
          return false;
        if (!this.fileUri.equals(that.fileUri))
          return false;
      }

      boolean this_present_lineNumber = true;
      boolean that_present_lineNumber = true;
      if (this_present_lineNumber || that_present_lineNumber) {
        if (!(this_present_lineNumber && that_present_lineNumber))
          return false;
        if (this.lineNumber != that.lineNumber)
          return false;
      }

      boolean this_present_columnNumber = true;
      boolean that_present_columnNumber = true;
      if (this_present_columnNumber || that_present_columnNumber) {
        if (!(this_present_columnNumber && that_present_columnNumber))
          return false;
        if (this.columnNumber != that.columnNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileUri()) ? 131071 : 524287);
      if (isSetFileUri())
        hashCode = hashCode * 8191 + fileUri.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lineNumber);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(columnNumber);

      return hashCode;
    }

    @Override
    public int compareTo(logInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFileUri(), other.isSetFileUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUri, other.fileUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLineNumber(), other.isSetLineNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLineNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetColumnNumber(), other.isSetColumnNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNumber, other.columnNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logInfo_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileUri:");
      if (this.fileUri == null) {
        sb.append("null");
      } else {
        sb.append(this.fileUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lineNumber:");
      sb.append(this.lineNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnNumber:");
      sb.append(this.columnNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logInfo_argsStandardScheme getScheme() {
        return new logInfo_argsStandardScheme();
      }
    }

    private static class logInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileUri = iprot.readString();
                struct.setFileUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lineNumber = iprot.readI64();
                struct.setLineNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.columnNumber = iprot.readI64();
                struct.setColumnNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.fileUri != null) {
          oprot.writeFieldBegin(FILE_URI_FIELD_DESC);
          oprot.writeString(struct.fileUri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.lineNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLUMN_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.columnNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logInfo_argsTupleScheme getScheme() {
        return new logInfo_argsTupleScheme();
      }
    }

    private static class logInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetFileUri()) {
          optionals.set(1);
        }
        if (struct.isSetLineNumber()) {
          optionals.set(2);
        }
        if (struct.isSetColumnNumber()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetFileUri()) {
          oprot.writeString(struct.fileUri);
        }
        if (struct.isSetLineNumber()) {
          oprot.writeI64(struct.lineNumber);
        }
        if (struct.isSetColumnNumber()) {
          oprot.writeI64(struct.columnNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileUri = iprot.readString();
          struct.setFileUriIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lineNumber = iprot.readI64();
          struct.setLineNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.columnNumber = iprot.readI64();
          struct.setColumnNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logInfo_result implements org.apache.thrift.TBase<logInfo_result, logInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<logInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logInfo_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logInfo_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logInfo_result.class, metaDataMap);
    }

    public logInfo_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logInfo_result(logInfo_result other) {
    }

    public logInfo_result deepCopy() {
      return new logInfo_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logInfo_result)
        return this.equals((logInfo_result)that);
      return false;
    }

    public boolean equals(logInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(logInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logInfo_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logInfo_resultStandardScheme getScheme() {
        return new logInfo_resultStandardScheme();
      }
    }

    private static class logInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logInfo_resultTupleScheme getScheme() {
        return new logInfo_resultTupleScheme();
      }
    }

    private static class logInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logError_args implements org.apache.thrift.TBase<logError_args, logError_args._Fields>, java.io.Serializable, Cloneable, Comparable<logError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logError_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNumber", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logError_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logError_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String fileUri; // required
    public long lineNumber; // required
    public long columnNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      FILE_URI((short)2, "fileUri"),
      LINE_NUMBER((short)3, "lineNumber"),
      COLUMN_NUMBER((short)4, "columnNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // FILE_URI
            return FILE_URI;
          case 3: // LINE_NUMBER
            return LINE_NUMBER;
          case 4: // COLUMN_NUMBER
            return COLUMN_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINENUMBER_ISSET_ID = 0;
    private static final int __COLUMNNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_URI, new org.apache.thrift.meta_data.FieldMetaData("fileUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COLUMN_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("columnNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logError_args.class, metaDataMap);
    }

    public logError_args() {
    }

    public logError_args(
      java.lang.String message,
      java.lang.String fileUri,
      long lineNumber,
      long columnNumber)
    {
      this();
      this.message = message;
      this.fileUri = fileUri;
      this.lineNumber = lineNumber;
      setLineNumberIsSet(true);
      this.columnNumber = columnNumber;
      setColumnNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logError_args(logError_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetFileUri()) {
        this.fileUri = other.fileUri;
      }
      this.lineNumber = other.lineNumber;
      this.columnNumber = other.columnNumber;
    }

    public logError_args deepCopy() {
      return new logError_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
      this.fileUri = null;
      setLineNumberIsSet(false);
      this.lineNumber = 0;
      setColumnNumberIsSet(false);
      this.columnNumber = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessage() {
      return this.message;
    }

    public logError_args setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFileUri() {
      return this.fileUri;
    }

    public logError_args setFileUri(@org.apache.thrift.annotation.Nullable java.lang.String fileUri) {
      this.fileUri = fileUri;
      return this;
    }

    public void unsetFileUri() {
      this.fileUri = null;
    }

    /** Returns true if field fileUri is set (has been assigned a value) and false otherwise */
    public boolean isSetFileUri() {
      return this.fileUri != null;
    }

    public void setFileUriIsSet(boolean value) {
      if (!value) {
        this.fileUri = null;
      }
    }

    public long getLineNumber() {
      return this.lineNumber;
    }

    public logError_args setLineNumber(long lineNumber) {
      this.lineNumber = lineNumber;
      setLineNumberIsSet(true);
      return this;
    }

    public void unsetLineNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetLineNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    public void setLineNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
    }

    public long getColumnNumber() {
      return this.columnNumber;
    }

    public logError_args setColumnNumber(long columnNumber) {
      this.columnNumber = columnNumber;
      setColumnNumberIsSet(true);
      return this;
    }

    public void unsetColumnNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    /** Returns true if field columnNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    public void setColumnNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((java.lang.String)value);
        }
        break;

      case FILE_URI:
        if (value == null) {
          unsetFileUri();
        } else {
          setFileUri((java.lang.String)value);
        }
        break;

      case LINE_NUMBER:
        if (value == null) {
          unsetLineNumber();
        } else {
          setLineNumber((java.lang.Long)value);
        }
        break;

      case COLUMN_NUMBER:
        if (value == null) {
          unsetColumnNumber();
        } else {
          setColumnNumber((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case FILE_URI:
        return getFileUri();

      case LINE_NUMBER:
        return getLineNumber();

      case COLUMN_NUMBER:
        return getColumnNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case FILE_URI:
        return isSetFileUri();
      case LINE_NUMBER:
        return isSetLineNumber();
      case COLUMN_NUMBER:
        return isSetColumnNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logError_args)
        return this.equals((logError_args)that);
      return false;
    }

    public boolean equals(logError_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_fileUri = true && this.isSetFileUri();
      boolean that_present_fileUri = true && that.isSetFileUri();
      if (this_present_fileUri || that_present_fileUri) {
        if (!(this_present_fileUri && that_present_fileUri))
          return false;
        if (!this.fileUri.equals(that.fileUri))
          return false;
      }

      boolean this_present_lineNumber = true;
      boolean that_present_lineNumber = true;
      if (this_present_lineNumber || that_present_lineNumber) {
        if (!(this_present_lineNumber && that_present_lineNumber))
          return false;
        if (this.lineNumber != that.lineNumber)
          return false;
      }

      boolean this_present_columnNumber = true;
      boolean that_present_columnNumber = true;
      if (this_present_columnNumber || that_present_columnNumber) {
        if (!(this_present_columnNumber && that_present_columnNumber))
          return false;
        if (this.columnNumber != that.columnNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileUri()) ? 131071 : 524287);
      if (isSetFileUri())
        hashCode = hashCode * 8191 + fileUri.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lineNumber);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(columnNumber);

      return hashCode;
    }

    @Override
    public int compareTo(logError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFileUri(), other.isSetFileUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUri, other.fileUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLineNumber(), other.isSetLineNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLineNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetColumnNumber(), other.isSetColumnNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNumber, other.columnNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logError_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileUri:");
      if (this.fileUri == null) {
        sb.append("null");
      } else {
        sb.append(this.fileUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lineNumber:");
      sb.append(this.lineNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnNumber:");
      sb.append(this.columnNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logError_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logError_argsStandardScheme getScheme() {
        return new logError_argsStandardScheme();
      }
    }

    private static class logError_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logError_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileUri = iprot.readString();
                struct.setFileUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lineNumber = iprot.readI64();
                struct.setLineNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.columnNumber = iprot.readI64();
                struct.setColumnNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logError_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.fileUri != null) {
          oprot.writeFieldBegin(FILE_URI_FIELD_DESC);
          oprot.writeString(struct.fileUri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.lineNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLUMN_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.columnNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logError_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logError_argsTupleScheme getScheme() {
        return new logError_argsTupleScheme();
      }
    }

    private static class logError_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetFileUri()) {
          optionals.set(1);
        }
        if (struct.isSetLineNumber()) {
          optionals.set(2);
        }
        if (struct.isSetColumnNumber()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetFileUri()) {
          oprot.writeString(struct.fileUri);
        }
        if (struct.isSetLineNumber()) {
          oprot.writeI64(struct.lineNumber);
        }
        if (struct.isSetColumnNumber()) {
          oprot.writeI64(struct.columnNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileUri = iprot.readString();
          struct.setFileUriIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lineNumber = iprot.readI64();
          struct.setLineNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.columnNumber = iprot.readI64();
          struct.setColumnNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logError_result implements org.apache.thrift.TBase<logError_result, logError_result._Fields>, java.io.Serializable, Cloneable, Comparable<logError_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logError_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logError_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logError_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logError_result.class, metaDataMap);
    }

    public logError_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logError_result(logError_result other) {
    }

    public logError_result deepCopy() {
      return new logError_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logError_result)
        return this.equals((logError_result)that);
      return false;
    }

    public boolean equals(logError_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(logError_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logError_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logError_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logError_resultStandardScheme getScheme() {
        return new logError_resultStandardScheme();
      }
    }

    private static class logError_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logError_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logError_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logError_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logError_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logError_resultTupleScheme getScheme() {
        return new logError_resultTupleScheme();
      }
    }

    private static class logError_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logError_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logError_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logError_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logWarning_args implements org.apache.thrift.TBase<logWarning_args, logWarning_args._Fields>, java.io.Serializable, Cloneable, Comparable<logWarning_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logWarning_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUri", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNumber", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logWarning_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logWarning_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String fileUri; // required
    public long lineNumber; // required
    public long columnNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE((short)1, "message"),
      FILE_URI((short)2, "fileUri"),
      LINE_NUMBER((short)3, "lineNumber"),
      COLUMN_NUMBER((short)4, "columnNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE
            return MESSAGE;
          case 2: // FILE_URI
            return FILE_URI;
          case 3: // LINE_NUMBER
            return LINE_NUMBER;
          case 4: // COLUMN_NUMBER
            return COLUMN_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LINENUMBER_ISSET_ID = 0;
    private static final int __COLUMNNUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_URI, new org.apache.thrift.meta_data.FieldMetaData("fileUri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COLUMN_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("columnNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logWarning_args.class, metaDataMap);
    }

    public logWarning_args() {
    }

    public logWarning_args(
      java.lang.String message,
      java.lang.String fileUri,
      long lineNumber,
      long columnNumber)
    {
      this();
      this.message = message;
      this.fileUri = fileUri;
      this.lineNumber = lineNumber;
      setLineNumberIsSet(true);
      this.columnNumber = columnNumber;
      setColumnNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logWarning_args(logWarning_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetFileUri()) {
        this.fileUri = other.fileUri;
      }
      this.lineNumber = other.lineNumber;
      this.columnNumber = other.columnNumber;
    }

    public logWarning_args deepCopy() {
      return new logWarning_args(this);
    }

    @Override
    public void clear() {
      this.message = null;
      this.fileUri = null;
      setLineNumberIsSet(false);
      this.lineNumber = 0;
      setColumnNumberIsSet(false);
      this.columnNumber = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessage() {
      return this.message;
    }

    public logWarning_args setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFileUri() {
      return this.fileUri;
    }

    public logWarning_args setFileUri(@org.apache.thrift.annotation.Nullable java.lang.String fileUri) {
      this.fileUri = fileUri;
      return this;
    }

    public void unsetFileUri() {
      this.fileUri = null;
    }

    /** Returns true if field fileUri is set (has been assigned a value) and false otherwise */
    public boolean isSetFileUri() {
      return this.fileUri != null;
    }

    public void setFileUriIsSet(boolean value) {
      if (!value) {
        this.fileUri = null;
      }
    }

    public long getLineNumber() {
      return this.lineNumber;
    }

    public logWarning_args setLineNumber(long lineNumber) {
      this.lineNumber = lineNumber;
      setLineNumberIsSet(true);
      return this;
    }

    public void unsetLineNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetLineNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    public void setLineNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
    }

    public long getColumnNumber() {
      return this.columnNumber;
    }

    public logWarning_args setColumnNumber(long columnNumber) {
      this.columnNumber = columnNumber;
      setColumnNumberIsSet(true);
      return this;
    }

    public void unsetColumnNumber() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    /** Returns true if field columnNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetColumnNumber() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
    }

    public void setColumnNumberIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((java.lang.String)value);
        }
        break;

      case FILE_URI:
        if (value == null) {
          unsetFileUri();
        } else {
          setFileUri((java.lang.String)value);
        }
        break;

      case LINE_NUMBER:
        if (value == null) {
          unsetLineNumber();
        } else {
          setLineNumber((java.lang.Long)value);
        }
        break;

      case COLUMN_NUMBER:
        if (value == null) {
          unsetColumnNumber();
        } else {
          setColumnNumber((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE:
        return getMessage();

      case FILE_URI:
        return getFileUri();

      case LINE_NUMBER:
        return getLineNumber();

      case COLUMN_NUMBER:
        return getColumnNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE:
        return isSetMessage();
      case FILE_URI:
        return isSetFileUri();
      case LINE_NUMBER:
        return isSetLineNumber();
      case COLUMN_NUMBER:
        return isSetColumnNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logWarning_args)
        return this.equals((logWarning_args)that);
      return false;
    }

    public boolean equals(logWarning_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_fileUri = true && this.isSetFileUri();
      boolean that_present_fileUri = true && that.isSetFileUri();
      if (this_present_fileUri || that_present_fileUri) {
        if (!(this_present_fileUri && that_present_fileUri))
          return false;
        if (!this.fileUri.equals(that.fileUri))
          return false;
      }

      boolean this_present_lineNumber = true;
      boolean that_present_lineNumber = true;
      if (this_present_lineNumber || that_present_lineNumber) {
        if (!(this_present_lineNumber && that_present_lineNumber))
          return false;
        if (this.lineNumber != that.lineNumber)
          return false;
      }

      boolean this_present_columnNumber = true;
      boolean that_present_columnNumber = true;
      if (this_present_columnNumber || that_present_columnNumber) {
        if (!(this_present_columnNumber && that_present_columnNumber))
          return false;
        if (this.columnNumber != that.columnNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileUri()) ? 131071 : 524287);
      if (isSetFileUri())
        hashCode = hashCode * 8191 + fileUri.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lineNumber);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(columnNumber);

      return hashCode;
    }

    @Override
    public int compareTo(logWarning_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFileUri(), other.isSetFileUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUri, other.fileUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLineNumber(), other.isSetLineNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLineNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetColumnNumber(), other.isSetColumnNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumnNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNumber, other.columnNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logWarning_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileUri:");
      if (this.fileUri == null) {
        sb.append("null");
      } else {
        sb.append(this.fileUri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lineNumber:");
      sb.append(this.lineNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("columnNumber:");
      sb.append(this.columnNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logWarning_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logWarning_argsStandardScheme getScheme() {
        return new logWarning_argsStandardScheme();
      }
    }

    private static class logWarning_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logWarning_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logWarning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileUri = iprot.readString();
                struct.setFileUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LINE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lineNumber = iprot.readI64();
                struct.setLineNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COLUMN_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.columnNumber = iprot.readI64();
                struct.setColumnNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logWarning_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.fileUri != null) {
          oprot.writeFieldBegin(FILE_URI_FIELD_DESC);
          oprot.writeString(struct.fileUri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.lineNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COLUMN_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.columnNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logWarning_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logWarning_argsTupleScheme getScheme() {
        return new logWarning_argsTupleScheme();
      }
    }

    private static class logWarning_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logWarning_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logWarning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessage()) {
          optionals.set(0);
        }
        if (struct.isSetFileUri()) {
          optionals.set(1);
        }
        if (struct.isSetLineNumber()) {
          optionals.set(2);
        }
        if (struct.isSetColumnNumber()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetFileUri()) {
          oprot.writeString(struct.fileUri);
        }
        if (struct.isSetLineNumber()) {
          oprot.writeI64(struct.lineNumber);
        }
        if (struct.isSetColumnNumber()) {
          oprot.writeI64(struct.columnNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logWarning_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileUri = iprot.readString();
          struct.setFileUriIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lineNumber = iprot.readI64();
          struct.setLineNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.columnNumber = iprot.readI64();
          struct.setColumnNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logWarning_result implements org.apache.thrift.TBase<logWarning_result, logWarning_result._Fields>, java.io.Serializable, Cloneable, Comparable<logWarning_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logWarning_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logWarning_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logWarning_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logWarning_result.class, metaDataMap);
    }

    public logWarning_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logWarning_result(logWarning_result other) {
    }

    public logWarning_result deepCopy() {
      return new logWarning_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logWarning_result)
        return this.equals((logWarning_result)that);
      return false;
    }

    public boolean equals(logWarning_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(logWarning_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logWarning_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logWarning_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logWarning_resultStandardScheme getScheme() {
        return new logWarning_resultStandardScheme();
      }
    }

    private static class logWarning_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logWarning_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logWarning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logWarning_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logWarning_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logWarning_resultTupleScheme getScheme() {
        return new logWarning_resultTupleScheme();
      }
    }

    private static class logWarning_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logWarning_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logWarning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logWarning_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileWrote_args implements org.apache.thrift.TBase<fileWrote_args, fileWrote_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileWrote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileWrote_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileWrote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileWrote_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String filePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileWrote_args.class, metaDataMap);
    }

    public fileWrote_args() {
    }

    public fileWrote_args(
      java.lang.String filePath)
    {
      this();
      this.filePath = filePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileWrote_args(fileWrote_args other) {
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
    }

    public fileWrote_args deepCopy() {
      return new fileWrote_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilePath() {
      return this.filePath;
    }

    public fileWrote_args setFilePath(@org.apache.thrift.annotation.Nullable java.lang.String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof fileWrote_args)
        return this.equals((fileWrote_args)that);
      return false;
    }

    public boolean equals(fileWrote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fileWrote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileWrote_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileWrote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileWrote_argsStandardScheme getScheme() {
        return new fileWrote_argsStandardScheme();
      }
    }

    private static class fileWrote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileWrote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileWrote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileWrote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileWrote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileWrote_argsTupleScheme getScheme() {
        return new fileWrote_argsTupleScheme();
      }
    }

    private static class fileWrote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileWrote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileWrote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilePath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileWrote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileWrote_result implements org.apache.thrift.TBase<fileWrote_result, fileWrote_result._Fields>, java.io.Serializable, Cloneable, Comparable<fileWrote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileWrote_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileWrote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileWrote_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileWrote_result.class, metaDataMap);
    }

    public fileWrote_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileWrote_result(fileWrote_result other) {
    }

    public fileWrote_result deepCopy() {
      return new fileWrote_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof fileWrote_result)
        return this.equals((fileWrote_result)that);
      return false;
    }

    public boolean equals(fileWrote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(fileWrote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileWrote_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileWrote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileWrote_resultStandardScheme getScheme() {
        return new fileWrote_resultStandardScheme();
      }
    }

    private static class fileWrote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileWrote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileWrote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileWrote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileWrote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileWrote_resultTupleScheme getScheme() {
        return new fileWrote_resultTupleScheme();
      }
    }

    private static class fileWrote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileWrote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileWrote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileWrote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
